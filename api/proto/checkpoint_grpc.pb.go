// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: api/proto/checkpoint.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CheckpointService_Checkpoint_FullMethodName = "/checkpoint.CheckpointService/Checkpoint"
	CheckpointService_Restore_FullMethodName    = "/checkpoint.CheckpointService/Restore"
	CheckpointService_Health_FullMethodName     = "/checkpoint.CheckpointService/Health"
)

// CheckpointServiceClient is the client API for CheckpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CheckpointService provides container checkpoint and restore operations
type CheckpointServiceClient interface {
	// Checkpoint creates a checkpoint of a container
	Checkpoint(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	// Restore restores a container from a checkpoint
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// Health check for the service
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type checkpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckpointServiceClient(cc grpc.ClientConnInterface) CheckpointServiceClient {
	return &checkpointServiceClient{cc}
}

func (c *checkpointServiceClient) Checkpoint(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, CheckpointService_Checkpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointServiceClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, CheckpointService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CheckpointService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckpointServiceServer is the server API for CheckpointService service.
// All implementations must embed UnimplementedCheckpointServiceServer
// for forward compatibility.
//
// CheckpointService provides container checkpoint and restore operations
type CheckpointServiceServer interface {
	// Checkpoint creates a checkpoint of a container
	Checkpoint(context.Context, *CheckpointRequest) (*CheckpointResponse, error)
	// Restore restores a container from a checkpoint
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// Health check for the service
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedCheckpointServiceServer()
}

// UnimplementedCheckpointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCheckpointServiceServer struct{}

func (UnimplementedCheckpointServiceServer) Checkpoint(context.Context, *CheckpointRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (UnimplementedCheckpointServiceServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedCheckpointServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCheckpointServiceServer) mustEmbedUnimplementedCheckpointServiceServer() {}
func (UnimplementedCheckpointServiceServer) testEmbeddedByValue()                           {}

// UnsafeCheckpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckpointServiceServer will
// result in compilation errors.
type UnsafeCheckpointServiceServer interface {
	mustEmbedUnimplementedCheckpointServiceServer()
}

func RegisterCheckpointServiceServer(s grpc.ServiceRegistrar, srv CheckpointServiceServer) {
	// If the following call pancis, it indicates UnimplementedCheckpointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CheckpointService_ServiceDesc, srv)
}

func _CheckpointService_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_Checkpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).Checkpoint(ctx, req.(*CheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckpointService_ServiceDesc is the grpc.ServiceDesc for CheckpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checkpoint.CheckpointService",
	HandlerType: (*CheckpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkpoint",
			Handler:    _CheckpointService_Checkpoint_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _CheckpointService_Restore_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _CheckpointService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/checkpoint.proto",
}
